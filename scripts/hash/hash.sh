#! /bin/bash

# This script computes hashes for files.

# Prints the help message for this script. The printed message contains detailed
# information about the usage of the script.
function printHelpMessage
{
	cat $HOME/scripts/hash/hash.help
}

# Calculates the hash value for the specified file by using the specified
# hash algorithm.
# PARAMETERS:
#	algorithm:	The hash algorithm to calculate the hash value of
#			the file
#	filename:	The name of the file, the hash is generated for.
function calculateHash
{
#	local $ALGORITHM="$1"
#	local $FILENAME="$2"

	$(echo $1"sum" $2) | grep -Pio '[0-9a-z]+' | head -n1
}

# Prints the results of the calculation by using either format.py output format
# or the legacy output format, depending on the value of the first parameter.
# PARAMETERS:
#	formatpy:	"true", if the format.py output format shall be used.
#	filename:	The file, for which the hash value was calculated.
#	provided hash:	The hash value, the user wanted to validate.
#	generated hash:	The hash value as generated by this script
#	valid:		Wheather the hashes match ("true"/"false")
#	algorithm:	The algorithm which was used to calculate the hash
function printResults
{
	local USE_FORMATPY_FORMAT="$1"
	local FILENAME="$2"
	local HASH="$3"
	local GENERATED_HASH="$4"
	local IS_VALID="$5"
	local ALGORITHM="$6"

	if [ "$USE_FORMATPY_FORMAT" == true ]
	then
		echo "fileToHash=$FILENAME"
		echo "providedHash=$HASH"
		echo "actualHash=$GENERATED_HASH"
		echo "valid=$IS_VALID"
		echo "algorithm=$ALGORITHM"
	else
		if [ "$HASH" == null ]
		then	
			echo "$GENERATED_HASH"
		else
			echo "$IS_VALID"
		fi
	fi
}

function main
{

	local FORMAT=false
	local ALGORITHM=sha1
	local FILE=null
	local HASH=null

	while getopts a:f:v:hk INPUT
	do
		case $INPUT
		in
			a) 	ALGORITHM=$OPTARG;;
			f) 	FILE=$OPTARG;;
			v) 	HASH=$OPTARG;;
			h) 	printHelpMessage;
				exit;; 
			k)	FORMAT=true;;
	       	\?) 	exit;;
		esac
	done
	
	if [ "$FILE" == "null" ]
	then
	
		echo -n "No file specified. Use -f to specify the " 1>&2
		echo	"target file!" 1>&2
		exit 1
	fi
	
	local GENERATED_HASH=$(calculateHash $ALGORITHM $FILE)
	local VALID="valid"

	if [ "$HASH" != "null" ]
	then
	
		if [ "$HASH" != "$GENERATED_HASH" ]
		then
			VALID="invalid"
		fi
	fi

	printResults $FORMAT $FILE $HASH $GENERATED_HASH $VALID $ALGORITHM
}

main "$@"
exit 0















